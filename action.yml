name: "ScanCode action"
description: "Run ScanCode.io pipelines in your workflows"
inputs:
  pipelines:
    description: "Names of the pipelines (comma-separated) and in order."
    default: "scan_codebase"
  output-formats:
    description: "Output formats"
    default: "json xlsx spdx cyclonedx"  
  inputs-path:
    description: "Relative path within the $GITHUB_WORKSPACE for pipeline inputs"
    default: "${{ github.workspace }}/scancode-inputs"
  input-urls:
    description: "Provide one or more URLs to download for the pipeline run execution."
    required: false
    default: ""
  project-name:
    description: "Name of the project."
    default: "scancode-action"
  outputs-archive-name:
    description: "Name of the outputs archive."
    default: "scancode-outputs"
  check-compliance:
    description: |
      Check for compliance issues in the project.
      Exits with a non-zero status if compliance issues are detected.
    required: false
    default: "false"
  compliance-fail-level:
    description: "Failure level for compliance check. Options: ERROR, WARNING, MISSING."
    required: false
    default: "ERROR"
  compliance-fail-on-vulnerabilities:
    description: |
      Exit with a non-zero status if known vulnerabilities are detected in discovered 
      packages and dependencies.
    required: false
    default: "false"
  python-version:
    description: "Python version."
    default: "3.12"
  scancodeio-repo-branch:
    description: "Branch to install ScanCode.io from the GitHub repository (optional)"
    required: false
    default: ""

runs:
  using: "composite"
  steps:
    - uses: actions/setup-python@v5
      with:
        python-version: ${{ inputs.python-version }}

    - name: Download ScanCode Pipeline Script
      shell: bash
      run: |
        curl -o scancode_pipeline.py https://raw.githubusercontent.com/NucleonGodX/scancode-action/improve-structure/scripts/scancode_pipeline.py
        chmod +x scancode_pipeline.py

    - name: Run ScanCode Pipeline
      shell: bash
      run: |
        python scancode_pipeline.py \
          --project-name "${{ inputs.project-name }}" \
          --pipelines "${{ inputs.pipelines }}" \
          --output-formats "${{ inputs.output-formats }}" \
          --inputs-path "${{ inputs.inputs-path }}" \
          --input-urls "${{ inputs.input-urls }}" \
          ${{ inputs.check-compliance == 'true' && '--check-compliance' || '' }} \
          --compliance-fail-level "${{ inputs.compliance-fail-level }}" \
          ${{ inputs.compliance-fail-on-vulnerabilities == 'true' && '--compliance-fail-on-vulnerabilities' || '' }} \
          ${{ inputs.scancodeio-repo-branch != '' && format('--scancodeio-repo-branch {0}', inputs.scancodeio-repo-branch) || '' }}

    - name: Get project work directory for upload
      shell: bash
      run: |
        project_status=$(scanpipe status --project ${{ inputs.project-name }})
        work_directory=$(echo "$project_status" | grep -oP 'Work directory:\s*\K[^\n]+')
        echo "PROJECT_WORK_DIRECTORY=$work_directory" >> $GITHUB_ENV

    - name: Upload outputs
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.outputs-archive-name }}
        path: ${{ env.PROJECT_WORK_DIRECTORY }}/output/*
