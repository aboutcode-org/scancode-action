name: "ScanCode action"
description: "Run ScanCode.io pipelines in your workflows"
inputs:
  pipelines:
    description: "Names of the pipelines (comma-separated) and in order."
    default: "scan_codebase"
  output-formats:
    description: "Output formats"
    default: "json xlsx spdx cyclonedx"
  inputs-path:
    description: "Relative path within the $GITHUB_WORKSPACE for pipeline inputs"
    default: "${{ github.workspace }}/scancode-inputs"
  project-name:
    description: "Name of the project"
    default: "scancode-action"
  python-version:
    description: "Python version"
    default: "3.11"

runs:
  using: "composite"
  steps:
    - uses: actions/setup-python@v5
      with:
        python-version: ${{ inputs.python-version }}

    - name: Set up environment
      shell: bash
      run: |
        echo "SECRET_KEY=$(openssl rand -base64 32)" >> $GITHUB_ENV
        echo "SCANCODEIO_DB_ENGINE=django.db.backends.sqlite3" >> $GITHUB_ENV
        echo "SCANCODEIO_DB_NAME=sqlite3.db" >> $GITHUB_ENV

    - name: Install ScanCode.io
      shell: bash
      run: |
        pip install scancodeio
        scanpipe migrate

    - name: Generate pipelines CLI arguments
      shell: bash
      run: |
        IFS=',' read -ra PIPELINES <<< "${{ inputs.pipelines }}"
        options=""
        for pipeline in "${PIPELINES[@]}"; do
          options+="--pipeline $pipeline "
        done
        echo "PIPELINE_CLI_ARGS=${options}" >> $GITHUB_ENV

    - name: Create project with ${{ inputs.pipelines }} pipelines
      shell: bash
      run: |
        scanpipe create-project ${{ inputs.project-name }} ${{ env.PIPELINE_CLI_ARGS }}

    - name: Set project work directory in the environment
      shell: bash
      run: |
        project_status=$(scanpipe status --project ${{ inputs.project-name }})
        work_directory=$(echo "$project_status" | grep -oP 'Work directory:\s*\K[^\n]+')
        echo "PROJECT_WORK_DIRECTORY=$work_directory" >> $GITHUB_ENV

    - name: Copy input files to project work directory
      shell: bash
      run: cp -r ${{ inputs.inputs-path }}/* ${{ env.PROJECT_WORK_DIRECTORY }}/input/

    - name: Run the pipelines
      shell: bash
      run: scanpipe execute --project ${{ inputs.project-name }} --no-color

    - name: Generate outputs
      id: scanpipe
      shell: bash
      run: scanpipe output 
        --project ${{ inputs.project-name }} 
        --format ${{ inputs.output-formats }} 
        --no-color

    - name: Upload outputs
      uses: actions/upload-artifact@v4
      id: artifact-upload-step
      with:
        name: scanpipe-outputs
        path: ${{ env.PROJECT_WORK_DIRECTORY }}/output/*
